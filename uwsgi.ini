[uwsgi]
module = run:app
master = true               # 启动主进程，来管理其他进程，其它的uwsgi进程都是这个master进程的子进程
processes = 3               # 指定开启的工作进程数量（这里是开启4个进程）
cheaper = 2                 # 始终保持的最少workers数量
workers = 10                # 可生成的最大工作线程数
idle = 1200                 # 在经过sec秒的不活跃状态的进程会被销毁(进入了cheap模式)，并最少保留cheaper指定的进程数
cheaper-initial = 5         # 启动时要生成的workers线程数
cheaper-step = 1            # 一次应该产生多少个workers
cheaper-algo = spare        # 设置较便宜的算法使用，如果没有设置默认值将使用
cheaper-overload = 5        # 至少每 cheaper-overload 秒会生成新的worker,这个值将会决定uWSGI可以多快响应负载尖峰
buffer-size = 10240         # 设置用于uwsgi包解析的内部缓存区大小为128k。默认是4k
log-maxsize = 1024000
;enable-threads=true
;lazy=true

;stats = 0.0.0.0:9000        # monitor uwsgi status 通过该端口可以监控 uwsgi 的负载情况
;wsgi-file = run.py         # 指定要加载的WSGI文件，也即包含Flask实例(app)的文件名称
;threads = 2                # 设置每个工作进程的线程数
;socket = :8080             # 指定socket文件，也可以指定为127.0.0.1:9000，用于配置监听特定端口的套接字
;callable = app             # 指出uWSGI加载的模块中哪个变量将被调用， 也即Flask实例名称
;chmod-socket = 755         # unix socket是个文件，所以会受到unix系统的权限限制。如果我们的uwsgi客户端没有权限访问uWSGI socket，可以用这个选项设置unix socket的权限
;vacuum = true              # 当服务器退出的时候自动删除unix socket文件和pid文件
;limit-post = 104857600     # 限制http请求体大小
;die-on-term = true         # ？